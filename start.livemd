# Amazing Elixir

```elixir
Mix.install([
  {:kino, "~> 0.6.2"}
])

ExUnit.start(autorun: false)
```

## The Maze Module

```elixir
defmodule Maze do
  defstruct [:rows, :columns, :cells]

  @all_directions [:north, :east, :south, :west]

  def new(rows, columns) do
    maze = %__MODULE__{rows: rows, columns: columns}

    cells =
      for row <- 0..(rows - 1), column <- 0..(columns - 1), into: %{} do
        cell = {row, column}

        neighbors =
          for direction <- @all_directions,
              neighbor = get_neighbor(maze, cell, direction),
              into: %{} do
            {neighbor, false}
          end

        {cell, neighbors}
      end

    %__MODULE__{maze | cells: cells}
  end

  def get_cells(%__MODULE__{cells: cells} = maze) do
    Map.keys(cells) |> Enum.sort(&compare_cells(maze, &1, &2))
  end

  # TODO: make the comparison not depend on the maze
  defp compare_cells(maze, cell1, cell2),
    do: get_cell_ordinal(maze, cell1) <= get_cell_ordinal(maze, cell2)

  defp get_cell_ordinal(%__MODULE__{columns: columns}, {row, column}), do: columns * row + column

  def get_neighbor(maze, {row, column}, :north),
    do: maybe_cell_in_maze(maze, {row - 1, column})

  def get_neighbor(maze, {row, column}, :east),
    do: maybe_cell_in_maze(maze, {row, column + 1})

  def get_neighbor(maze, {row, column}, :south),
    do: maybe_cell_in_maze(maze, {row + 1, column})

  def get_neighbor(maze, {row, column}, :west),
    do: maybe_cell_in_maze(maze, {row, column - 1})

  defp maybe_cell_in_maze(%__MODULE__{rows: rows, columns: columns}, {row, column} = cell)
       when row >= 0 and row < rows and column >= 0 and column < columns do
    cell
  end

  defp maybe_cell_in_maze(_, _), do: nil

  def get_neighbors(maze, cell, directions),
    do:
      directions
      |> Enum.map(fn direction -> get_neighbor(maze, cell, direction) end)
      |> Enum.reject(&is_nil/1)

  def linked?(%__MODULE__{cells: cells}, cell_one, cell_two) do
    get_in(cells, [cell_one, cell_two])
  end

  def get_linked_cells(maze, cell) do
    get_neighbors(maze, cell, @all_directions)
    |> Enum.filter(fn neighbor -> linked?(maze, neighbor, cell) end)
  end

  def link(%__MODULE__{} = maze, cell_one, cell_two) do
    case get_in(maze.cells, [cell_one, cell_two]) do
      nil ->
        raise "can not link #{inspect(cell_one)} and #{inspect(cell_two)}"

      _ ->
        maze = put_in(maze.cells[cell_one][cell_two], true)
        put_in(maze.cells[cell_two][cell_one], true)
    end
  end

  def to_svg(
        %__MODULE__{rows: rows, columns: columns} = maze,
        cell_contents \\ %{},
        cell_size \\ 5
      ) do
    content =
      for {row, column} = cell <- Maze.get_cells(maze) do
        x1 = column * cell_size
        y1 = row * cell_size
        x2 = (column + 1) * cell_size
        y2 = (row + 1) * cell_size

        enabled_walls =
          %{
            north: Maze.get_neighbor(maze, cell, :north) == nil,
            east: !Maze.linked?(maze, cell, Maze.get_neighbor(maze, cell, :east)),
            south: !Maze.linked?(maze, cell, Maze.get_neighbor(maze, cell, :south)),
            west: Maze.get_neighbor(maze, cell, :west) == nil
          }
          |> Enum.filter(fn {_, enabled} -> enabled end)
          |> Enum.map(fn {direction, _} -> direction end)

        wall_svgs = %{
          north: svg_line(x1, y1, x2, y1),
          east: svg_line(x2, y1, x2, y2),
          south: svg_line(x1, y2, x2, y2),
          west: svg_line(x1, y1, x1, y2)
        }

        wall =
          for direction <- enabled_walls, into: "" do
            wall_svgs[direction]
          end

        if content = cell_contents[cell] do
          svg_text(x1, y1, cell_size, Integer.to_string(content, 36))
        else
          ""
        end <> wall
      end

    """
    <svg viewBox="0 0 #{columns * cell_size} #{rows * cell_size}"
         xmlns="http://www.w3.org/2000/svg">
      #{content}
    </svg>
    """
  end

  defp svg_line(x1, y1, x2, y2) do
    """
    <line x1="#{x1}" y1="#{y1}" x2="#{x2}" y2="#{y2}" style="stroke:black;stroke-width:0.1" />
    """
  end

  defp svg_text(x, y, cell_size, text) do
    """
    <text x="#{x + 1}" y="#{y + cell_size - 1}" font-size="#{cell_size - 1}pt" fill="gray">#{text}</text>
    """
  end
end
```

<!-- livebook:{"branch_parent_index":0} -->

## Testing the Maze module

```elixir
defmodule MazeTest do
  use ExUnit.Case, async: true

  @all_directions [:north, :east, :south, :west]

  describe "initialize" do
    test "not linked to any neighbor cell yet" do
      maze = Maze.new(5, 5)

      for cell <- Maze.get_cells(maze),
          direction <- @all_directions,
          neighbor = Maze.get_neighbor(maze, cell, direction) do
        refute Maze.linked?(maze, cell, neighbor)
      end
    end

    test "creates cells depending on the number of rows and columns" do
      assert Maze.new(2, 5) |> Maze.get_cells() |> length() == 2 * 5
      assert Maze.new(10, 8) |> Maze.get_cells() |> length() == 10 * 8
    end
  end

  test "get_neighbor" do
    maze = Maze.new(3, 3)

    refute Maze.get_neighbor(maze, {0, 0}, :north)
    assert Maze.get_neighbor(maze, {0, 0}, :east) == {0, 1}
    assert Maze.get_neighbor(maze, {0, 0}, :south) == {1, 0}
    refute Maze.get_neighbor(maze, {0, 0}, :west)

    assert Maze.get_neighbor(maze, {1, 0}, :north) == {0, 0}
    assert Maze.get_neighbor(maze, {1, 0}, :east) == {1, 1}
    assert Maze.get_neighbor(maze, {1, 0}, :south) == {2, 0}
    refute Maze.get_neighbor(maze, {1, 0}, :west)

    assert Maze.get_neighbor(maze, {2, 0}, :north) == {1, 0}
    assert Maze.get_neighbor(maze, {2, 0}, :east) == {2, 1}
    refute Maze.get_neighbor(maze, {2, 0}, :south)
    refute Maze.get_neighbor(maze, {2, 0}, :west)

    assert Maze.get_neighbor(maze, {1, 1}, :north) == {0, 1}
    assert Maze.get_neighbor(maze, {1, 1}, :east) == {1, 2}
    assert Maze.get_neighbor(maze, {1, 1}, :south) == {2, 1}
    assert Maze.get_neighbor(maze, {1, 1}, :west) == {1, 0}

    assert Maze.get_neighbor(maze, {2, 2}, :north) == {1, 2}
    refute Maze.get_neighbor(maze, {2, 2}, :east)
    refute Maze.get_neighbor(maze, {2, 2}, :south)
    assert Maze.get_neighbor(maze, {2, 2}, :west) == {2, 1}
  end

  test "get_neighbors" do
    maze = Maze.new(3, 3)

    assert Maze.get_neighbors(maze, {0, 0}, [:north, :east]) == [{0, 1}]

    assert Maze.get_neighbors(maze, {1, 1}, [:north, :east, :south, :west]) == [
             {0, 1},
             {1, 2},
             {2, 1},
             {1, 0}
           ]

    assert Maze.get_neighbors(maze, {1, 1}, [:west, :east, :north, :south]) == [
             {1, 0},
             {1, 2},
             {0, 1},
             {2, 1}
           ]
  end

  test "can link neighboring cells" do
    maze = Maze.new(2, 2) |> Maze.link({0, 0}, {0, 1})

    assert Maze.linked?(maze, {0, 0}, {0, 1})
    assert Maze.linked?(maze, {0, 1}, {0, 0})
    refute Maze.linked?(maze, {0, 0}, {1, 0})
    refute Maze.linked?(maze, {1, 0}, {0, 0})
  end

  test "can get linked cells" do
    maze = Maze.new(2, 2) |> Maze.link({0, 0}, {0, 1})

    assert [{0, 1}] = Maze.get_linked_cells(maze, {0, 0})
    assert [{0, 0}] = Maze.get_linked_cells(maze, {0, 1})
    assert [] = Maze.get_linked_cells(maze, {1, 0})
    assert [] = Maze.get_linked_cells(maze, {1, 1})
  end

  test "can not link distant cells" do
    assert_raise RuntimeError, "can not link {0, 0} and {1, 1}", fn ->
      Maze.new(2, 2) |> Maze.link({0, 0}, {1, 1})
    end
  end
end

ExUnit.run()
```

## Binary Tree algorithm

```elixir
defmodule BinaryTree do
  def build(maze) do
    maze
    |> Maze.get_cells()
    |> Enum.reduce(maze, fn cell, maze ->
      case Maze.get_neighbors(maze, cell, [:north, :east]) do
        [] ->
          maze

        neighbors ->
          Maze.link(maze, cell, Enum.random(neighbors))
      end
    end)
  end
end

Maze.new(50, 50)
|> BinaryTree.build()
|> Maze.to_svg()
|> Kino.Image.new(:svg)
```

## Sidewinder algorithm

```elixir
defmodule Sidewinder do
  def build(maze) do
    rows =
      maze
      |> Maze.get_cells()
      |> Enum.group_by(fn {row, _} -> row end)
      |> Enum.map(fn {_, cells} -> cells end)

    for [first | _] = items <- rows, reduce: maze do
      maze ->
        if Maze.get_neighbor(maze, first, :north) do
          groups = partition_row(items)
          maze = groups |> Enum.reduce(maze, &merge/2)
          groups |> Enum.reduce(maze, &link_north/2)
        else
          merge(items, maze)
        end
    end
  end

  defp merge(cells, maze) when is_list(cells) do
    cells
    |> Enum.drop(-1)
    |> Enum.reduce(maze, fn cell, maze ->
      east = Maze.get_neighbor(maze, cell, :east)
      Maze.link(maze, cell, east)
    end)
  end

  defp link_north(cells, maze) when is_list(cells) do
    from = Enum.random(cells)
    to = Maze.get_neighbor(maze, from, :north)
    Maze.link(maze, from, to)
  end

  defp partition_row(cells) do
    cells
    |> Enum.reverse()
    |> Enum.reduce([], fn
      item, [] ->
        [[item]]

      item, [active | closed] ->
        if Enum.random([true, false]) do
          [[item] | [active | closed]]
        else
          [[item | active] | closed]
        end
    end)
  end
end

Maze.new(50, 50)
|> Sidewinder.build()
|> Maze.to_svg()
|> Kino.Image.new(:svg)
```

## Dijkstra's algorithm

### Step 1: build the `distances` map

```elixir
defmodule Distances do
  def distances(maze, start_cell \\ {0, 0}) do
    distances_with(maze, [start_cell], %{start_cell => 0})
  end

  defp distances_with(_maze, _frontier_cells = [], distances) do
    distances
  end

  defp distances_with(maze, frontier_cells, distances) do
    {new_distances, new_frontier_cells} =
      for frontier_cell <- frontier_cells, reduce: {distances, []} do
        {distances, new_frontier_cells} ->
          for linked_cell <- Maze.get_linked_cells(maze, frontier_cell),
              distances[linked_cell] == nil,
              reduce: {distances, new_frontier_cells} do
            {distances, new_frontier_cells} ->
              new_distances = Map.put(distances, linked_cell, distances[frontier_cell] + 1)
              {new_distances, [linked_cell | new_frontier_cells]}
          end
      end

    distances_with(maze, new_frontier_cells, new_distances)
  end
end
```

```elixir
defmodule DistancesTest do
  use ExUnit.Case, async: true

  test "distances" do
    maze =
      Maze.new(2, 2)
      |> Maze.link({0, 0}, {0, 1})
      |> Maze.link({0, 1}, {1, 1})
      |> Maze.link({1, 1}, {1, 0})

    assert %{{0, 0} => 0, {0, 1} => 1, {1, 1} => 2, {1, 0} => 3} == Distances.distances(maze)
  end
end

ExUnit.run()
```

```elixir
maze = Maze.new(10, 10) |> Sidewinder.build()
distances = Distances.distances(maze)

maze
|> Maze.to_svg(distances)
|> Kino.Image.new(:svg)
```

### Step 2: back-track the shortest path given the distance of each cell

```elixir
defmodule ShortestPath do
  def build(%Maze{} = maze, from, to) do
    build_path(maze, Distances.distances(maze, from), %{}, from, to)
  end

  defp build_path(_maze, _distances, path, from, from), do: Map.put(path, from, 0)

  defp build_path(maze, distances, path, from, to) do
    new_to =
      {_, _} =
      Maze.get_linked_cells(maze, to)
      |> Enum.find(fn cell -> distances[cell] < distances[to] end)

    new_path = Map.put(path, to, distances[to])

    build_path(maze, distances, new_path, from, new_to)
  end
end
```

```elixir
defmodule ShortestPathTest do
  use ExUnit.Case, async: true

  test "shortest path" do
    maze =
      Maze.new(2, 3)
      |> Maze.link({0, 0}, {0, 1})
      |> Maze.link({0, 1}, {0, 2})
      |> Maze.link({1, 0}, {1, 1})
      |> Maze.link({1, 1}, {1, 2})
      |> Maze.link({0, 0}, {1, 0})
      |> Maze.link({0, 2}, {1, 2})

    assert %{{0, 0} => 0, {1, 0} => 1, {1, 1} => 2} == ShortestPath.build(maze, {0, 0}, {1, 1})
  end
end

ExUnit.run()
```

Now draw the solution

```elixir
maze = Maze.new(10, 10) |> Sidewinder.build()
shortest_path = ShortestPath.build(maze, {0, 0}, {9, 0})

maze
|> Maze.to_svg(shortest_path)
|> Kino.Image.new(:svg)
```
